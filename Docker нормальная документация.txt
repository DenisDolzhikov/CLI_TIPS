https://docs.docker.com/reference/cli/docker/  - дока по CLI докера
https://habr.com/ru/companies/ruvds/articles/440660/  - неплохая серия статей об основах

Инструкции Dockerfile

FROM — задаёт базовый (родительский) образ.
LABEL — описывает метаданные. Например — сведения о том, кто создал и поддерживает образ.
ENV — устанавливает постоянные переменные среды.
RUN — выполняет команду и создаёт слой образа. Используется для установки в контейнер пакетов.
COPY — копирует в контейнер файлы и папки.
ADD — копирует файлы и папки в контейнер, может распаковывать локальные .tar-файлы.
CMD — описывает команду с аргументами, которую нужно выполнить когда контейнер будет запущен. Аргументы могут быть переопределены при запуске контейнера. В файле может присутствовать лишь одна инструкция CMD.
WORKDIR — задаёт рабочую директорию для следующей инструкции.
ARG — задаёт переменные для передачи Docker во время сборки образа.
ENTRYPOINT — предоставляет команду с аргументами для вызова во время выполнения контейнера. Аргументы не переопределяются.
EXPOSE — указывает на необходимость открыть порт.
VOLUME — создаёт точку монтирования для работы с постоянным хранилищем.


Команды для управления образами:

docker image build - сборка образа
docker image push - отправлка образа в удаленный репозиторий
docker image ls - вывод списка образов
docker image history - вывод сведений о слоях образа.
docker image inspect - вывод подробной информации об образе, в том числе - сведений о слоях
docker image rm - удаление образа


Команды для управления контейнерами

docker container create - создание контейнера из образа
docker container start - запуск существующего контейнера
docker container run - создание контейнера и его запуск
docker container ls - вывод списка работающих контейнеров
docker container inspect - вывод подробной информации о контейнере
docker container logs - вывод логов
docker container stop - остановка работающего контейнера с отправкой главному процессу контейнера SIGTERM, и через некоторое время, SIGKILL.
docker container kill - остановка работающего контейнера с отправкой главному процессу контейнера сигнала SIGKILL.
docker container rm - удаление остановленного контейнера


Команды для управления томами

docker volume create
docker volume ls
docker volume inspect
docker volume rm
docker volume prune

Разные команды

docker version - вывод сведений о версиях клиента и сервера Docker
docker login - вход в реестр Docker
docker system prune - удаление неиспользуемых контейнеров, сетей и образов, которым не назначено имя и тег


Флаги

-p или --port
-a или --all
-s или --size
-i или --interactive
-t или --tty



Примеры работы с образами

docker image build -t my_repo/my_image:my_tag .  - создает образ, точка в конце указывает, что нужно собирать образ согласно инструкциям Dockerfile
docker login - авторизовываемся в docke hub
docker image push my_repo/my_image:my_tag

docker image ls - смотрим список образов

docker image history my_image - вывести сведения о промежуточных образах, входящих в состав образа, в частности — данные об их размерах и о том, как они были созданы

docker image inspect my_image - выводит подробные сведения об образе, в том числе — данные о слоях, из которых состоит образ.

docker image rm my_image - удаляем указанный образ
docker image rm $(docker images -a -q) - удаляем все локальные образы, а те, что в удаленном репозитории, удалены не будут.



Примеры работы с контейнерами

docker container create my_repo/my_image:my_tag - создаем контейнер
docker container start my_container - запускаем контейнер (нужно либо id контейнера, либо его имя)
docker container run -p 1000:5000 my_image - создает и запускает контейнер
docker container stop my_container - останавливает контейнер, у него есть по умолчанию 10 сек, чтобы завершить работу.
docker container kill my_container - быстро останавливает контейнер, не заботясь о корректности завершения работы.
docker container kill $(docker ps -q) - быстро останавливает все работающие контейнеры
docker rm my_container - удаление остановленного контейнера



Примеры работы с томами

docker volume create --name my_volume - создаем том



